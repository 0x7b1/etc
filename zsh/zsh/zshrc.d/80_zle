## keybindings (run 'bindkeys' for details, more details via man zshzle)

# custom escape code mappings
bindkey -s '\eQ13;3~' '\e^M'
bindkey -s '\eQ13;5~' '^\n' # conflicts with '^J'
bindkey -s '\eQ32;5~' '^@'

bindkey "${terminfo[khome]}" beginning-of-line # Home
bindkey "${terminfo[kend]}"  end-of-line       # End
bindkey "${terminfo[kich1]}" overwrite-mode    # Insert
bindkey "${terminfo[kdch1]}" delete-char       # Delete

# xterm normal cursor keys mode
bindkey '\e[H' beginning-of-line
bindkey '\e[F' end-of-line

# also do history expansion on space
bindkey ' ' magic-space

# only search local history by default, and all history for isearch
set-local-history() { zle .set-local-history }
zle -N set-local-history
zle-line-init()  { NUMERIC=1 zle set-local-history }
zle -N zle-line-init
zle-isearch-update() { NUMERIC=0 zle set-local-history }
zle -N zle-isearch-update
zle-isearch-exit()  { NUMERIC=1 zle set-local-history }
zle -N zle-isearch-exit

autoload up-line-or-beginning-search
# hack to get zsh highlighting to work for this widget
_up-line-or-beginning-search() { up-line-or-beginning-search }
zle -N up-line-or-beginning-search _up-line-or-beginning-search
bindkey '^p' up-line-or-beginning-search
bindkey -M menuselect '^p' up-line-or-search
autoload down-line-or-beginning-search
# hack to get zsh highlighting to work for this widget
_down-line-or-beginning-search() { down-line-or-beginning-search }
zle -N down-line-or-beginning-search _down-line-or-beginning-search
bindkey '^n' down-line-or-beginning-search
bindkey -M menuselect '^n' down-line-or-search

if is-at-least 4.3; then
    history-incremental-pattern-search-backward() {
        NUMERIC=0 zle set-local-history
        zle .history-incremental-pattern-search-backward "$@"
    }
    zle -N history-incremental-pattern-search-backward
    bindkey '^r' history-incremental-pattern-search-backward
    history-incremental-pattern-search-forward() {
        NUMERIC=0 zle set-local-history
        zle .history-incremental-pattern-search-forward "$@"
    }
    zle -N history-incremental-pattern-search-forward
    bindkey '^s' history-incremental-pattern-search-forward
fi

autoload smart-insert-last-word
zle -N insert-last-word smart-insert-last-word

# turn current line into comment and commit
bindkey '^[#' pound-insert

# define word separators (for stuff like backward-word, forward-word, backward-kill-word,..)
# also see select-word-style in zshcontrib
#  WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>' # the default
#  WORDCHARS=.
#  WORDCHARS='*?_[]~=&;!#$%^(){}'
#  WORDCHARS='${WORDCHARS:s@/@}'
export WORDCHARS="${WORDCHARS}|"

# only slash should be considered as a word separator:
slash-backward-kill-word() {
    local WORDCHARS="${WORDCHARS:s@/@}"
    # zle backward-word
    zle backward-kill-word
}
zle -N slash-backward-kill-word
# press esc-w (meta-w) to delete a word until its last '/'
# (not the same as ctrl-w!)
bindkey '^[w' slash-backward-kill-word

# we don't want to quote/espace URLs on our own...
autoload -U url-quote-magic
zle -N self-insert url-quote-magic

# escape extended-glob characters for git refspecs
autoload -Uz git-escape-magic
git-escape-magic

autoload -U insert-files
zle -N insert-files
bindkey "^Xf" insert-files

# press esc-e for editing command line in $EDITOR or $VISUAL
autoload -U edit-command-line
zle -N edit-command-line
bindkey '^[e' edit-command-line

bindkey '^[q' push-line-or-edit

# insert current date
_insert_datestamp() { LBUFFER+=${(%):-'%D{%Y-%m-%d}'}; }
zle -N insert-datestamp _insert_datestamp
bindkey '^[t' insert-datestamp

# press esc-m for inserting last typed word again (thanks to caphuso!)
insert-last-typed-word() { zle insert-last-word -- 0 -1 }
zle -N insert-last-typed-word
bindkey "^[m" insert-last-typed-word

bindkey "^[>" insert-last-word

# run command line as user root via sudo:
_sudo-command-line() {
    [[ $BUFFER != sudo\ * ]] && LBUFFER="sudo $LBUFFER"
}
zle -N sudo-command-line _sudo-command-line
bindkey "^Xs" sudo-command-line

autoload insert-unicode-char
zle -N insert-unicode-char
bindkey '^Xi' insert-unicode-char

# jump behind the first word on the cmdline to add options
function _jump_after_first_word() {
    local words
    words=(${(z)BUFFER})

    if (( ${#words} <= 1 )) ; then
        CURSOR=${#BUFFER}
    else
        CURSOR=${#${words[1]}}
    fi
}
zle -N _jump_after_first_word
bindkey '^X1' _jump_after_first_word

help-glob() {
    zle -M "\
    /   directories               *      executable plain files
    .   plain files               r,w,x  owner-readable/writable/executable
    @   symbolic links            A,I,E  group-readable/writable/executable
    =   sockets                   R,W,X  world-readable/writable/executable
    p   named pipes (FIFOs)       s,S,t  setuid/setgid/sticky files
    %   device files              f[+=-]NNN   files with access rights +/-/= NNN
    %b  block special files       U,G         owned by effective (U)ser/(G)roup
    %c  character special files   {u,g}NNN    owned by user, group id 'NNN'
                                  {u,g}:name: owned by user, group name 'name'

    m[dMwhms][-|+]n files modified up to (-) or before (+) n
                    days/months/weeks/hours/minutes/seconds (ago)
    i,I    case insensitive/sensitive
    ^      negates all qualifiers following it
    -      operate on symlink targets
    N      sets the NULL_GLOB option for the current pattern
    D      sets the GLOB_DOTS option for the current pattern
    oc     sort by c: name(n)/size(L)/modification time(m)/subdirs first(d)
    Oc     same as above, but descending
    [beg[,end]] limit list of returned filenames
    ,      separate 'or'ed qualifiers

    Pstring   prepend: *(P:-f:) --> -f file1 -f file2
    estring   execute string as shell code

  print *(m-1)          # Files modified up to a day ago
  print *(a1)           # Files accessed a day ago
  print *(@)            # Just symlinks
  print *(Lk+50)        # Files bigger than 50 kilobytes
  print *(Lk-50)        # Files smaller than 50 kilobytes
  print **/*.c          # All *.c files recursively starting in \$PWD
  print **/*.c~file.c   # Same as above, but excluding 'file.c'
  print (foo|bar).*     # Files starting with 'foo' or 'bar'
  print *~*.*           # All Files that do not contain a dot
  chmod 644 *(.^x)      # make all plain non-executable files publically readable
  print -l *(.c|.h)     # Lists *.c and *.h
  print **/*(g:users:)  # Recursively match all files that are owned by group 'users'
  echo /proc/*/cwd(:h:t:s/self//) # Analogous to >ps ax | awk '{print $1}'<"
}
zle -N help-glob
bindkey '^Xg' help-glob

# vim: filetype=zsh
