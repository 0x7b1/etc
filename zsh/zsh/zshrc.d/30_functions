freload() { while (( $# )); do; unfunction $1; autoload -U $1; shift; done }
compdef _functions freload

# use "dchange <package-name>" to view Debian's changelog of the package:
dchange() {
    if [[ -r /usr/share/doc/${1}/changelog.Debian.gz ]] ; then
        less /usr/share/doc/${1}/changelog.Debian.gz
    else
        if [[ -r /usr/share/doc/${1}/changelog.gz ]] ; then
            less /usr/share/doc/${1}/changelog.gz
        else
            echo "No changelog for package $1 found, sorry."
            return 1
        fi
    fi
}
_dchange() { _files -W /usr/share/doc -/ }
compdef _dchange dchange

# use "uchange <package-name>" to view upstream's changelog of the package:
uchange() {
    if [[ -r /usr/share/doc/${1}/changelog.gz ]] ; then
        less /usr/share/doc/${1}/changelog.gz
    else
        echo "No changelog for package $1 found, sorry."
        return 1
    fi
}
_uchange() { _files -W /usr/share/doc -/ }
compdef _uchange uchange

# zsh profiling
profile () {
    ZSH_PROFILE_RC=1 $SHELL "$@"
}

# edit alias via zle:
edalias() {
    [[ -z "$1" ]] && { echo "Usage: edalias <alias_to_edit>" ; return 1 } || vared aliases'[$1]' ;
}
compdef _aliases edalias

# edit function via zle:
edfunc() {
    [[ -z "$1" ]] && { echo "Usage: edfunc <function_to_edit>" ; return 1 } || zed -f "$1" ;
}
compdef _functions edfunc

# grep for running process, like: 'psgrep vim'
psgrep() {
    if [[ -z "$1" ]] ; then
        echo "psgrep - grep for process(es) by keyword" >&2
        echo "Usage: psgrep <keyword>" >&2 ; return 1
    else
        ps xauwww | head -n1
        ps xauwww | grep -v "grep.*$1" | grep $1
    fi
}

# After resuming from suspend, system is paging heavilly, leading to very bad interactivity.
# taken from $LINUX-KERNELSOURCE/Documentation/power/swsusp.txt
[ -r /proc/1/maps ] && deswap() {
    print 'Reading /proc/[0-9]*/maps and sending output to /dev/null, this might take a while.'
    cat $(sed -ne 's:.* /:/:p' /proc/[0-9]*/maps | sort -u | grep -v '^/dev/')  > /dev/null
    print 'Finished, running "swapoff -a; swapon -a" may also be useful.'
}

bk()      { cp -r -b ${1} ${1}_$(date --iso-8601=m) }
sshot()   { scrot '%Y-%m-%d-%H%M%S_$wx$h.png' -e 'mv $f ~/media/desktop/screenshots/' "$@" }

# http://ft.bewatermyfriend.org/comp/zsh/zfunct.html
hl() {
#     if [[ -z ${2} ]] || (( ${#argv} > 2 )) ; then
#         printf 'usage: hl <syntax> <file>\n'
#         return 1
#     fi
    highlight --out-format=xterm256 --style=molokai "$1" | less
}

# upload()  { scp -p $1 cip:public_html/$2 }
upload() {
    if [[ -z "$1" ]]; then
        echo "usage: upload file1 file2 ..."
        return 1
    else
        wput ftp://majutsushi.net/httpdocs/stuff/ "$@"
    fi
    for i in "$@"; do
        echo "http://majutsushi.net/stuff/${i// /%20}"
    done
}

wp() {
    dig +short txt ${1// /_}.wp.dg.cx
}

pdfembedfonts() {
    if [[ $# != 1 ]]; then
        echo "Usage: $0 input.pdf"
        return 1
    else
        tmpname=$(mktemp)
        gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dNOPLATFONTS -dPDFSETTINGS=/prepress -sOutputFile=$tmpname $1
        mv $tmpname $1
    fi
}

zza() {
  NAMED_DIRECTORY=$PWD:t
  eval $NAMED_DIRECTORY=$PWD
  cd ~$NAMED_DIRECTORY
}

# Function Usage: doc packagename
doc() { cd /usr/share/doc/$1 && ll }
_doc() { _files -W /usr/share/doc -/ }
compdef _doc doc

# zsh with perl-regex - use it e.g. via:
# regcheck '\s\d\.\d{3}\.\d{3} Euro' ' 1.000.000 Euro'
regcheck() {
    zmodload -i zsh/pcre
    pcre_compile $1 && \
    pcre_match $2 && echo "regex matches" || echo "regex does not match"
}

# find out which libs define a symbol
# usage example: 'lcheck strcpy'
lcheck() {
    if [[ -n "$1" ]] ; then
        nm -go /usr/lib/lib*.a 2>/dev/null | grep ":[[:xdigit:]]\{8\} . .*$1" | grep "$1"
    else
        echo "Usage: lcheck <function>" >&2
    fi
}

# clean up directory
purge() {
    FILES=(*~(N) .*~(N) \#*\#(N) *.o(N) a.out(N) *.core(N) *.cmo(N) *.cmi(N) .*.swp(N))
    NBFILES=${#FILES}
    if [[ $NBFILES > 0 ]]; then
        print $FILES
        local ans
        echo -n "Remove these files? [y/n] "
        read -q ans
        if [[ $ans == "y" ]]
        then
            rm ${FILES}
            echo ">> $PWD purged, $NBFILES files removed"
        else
            echo "Nothing done"
        fi
    fi
}

getlinks ()   { perl -ne 'while ( m/"((www|ftp|http):\/\/.*?)"/gc ) { print $1, "\n"; }' $* }

# mkdir && cd
mcd() { mkdir -p "$@"; cd "$@" }

# display system state
status() {
    print ""
    print "Date..: "$(date "+%Y-%m-%d %H:%M:%S")""
    print "Shell.: Zsh $ZSH_VERSION (PID = $$, $SHLVL nests)"
    print "Term..: $TTY ($TERM), $BAUD bauds, $COLUMNS x $LINES chars"
    print "Login.: $LOGNAME (UID = $EUID) on $HOST"
    print "System: $(cat /etc/[A-Za-z]*[_-][rv]e[lr]*)"
    print "Uptime:$(uptime)"
    print ""
}

# backup important dirs
rs-important() {
    if [[ -z $1 ]]; then
        echo "usage: rs-important dest-dir"
        return 1
    fi

    rsync -vaxEHAX \
        --delete \
        --delete-excluded \
        --ignore-errors \
        --modify-window=1 \
        --progress \
        --exclude=/.local/share/Trash/** \
        --exclude=/.local/share/gvfs-metadata/** \
        $HOME/.etc \
        $HOME/.mozilla \
        $HOME/.config \
        $HOME/.lbdb \
        $HOME/.local \
        $HOME/.evolution \
        $HOME/.fceultra \
        $HOME/.fceux \
        $HOME/.gnome2 \
        $HOME/.gnupg \
        $HOME/.liferea_1.6 \
        $HOME/.offlineimap \
        $HOME/.openttd \
        $HOME/.purple \
        $HOME/.scummvm \
        $HOME/.ssh \
        $HOME/.zsnes \
        $HOME/.forward \
        $HOME/.netrc \
        $HOME/.offlineimaprc \
        $HOME/.scummvmrc \
        $HOME/Photos \
        $HOME/bin \
        $HOME/doc \
        $HOME/games \
        $HOME/media \
        $HOME/projects \
        $HOME/src \
        $HOME/work \
        $1 2>! $HOME/projects/rs-important.log

    cp $HOME/projects/rs-important.log $1/projects/
}

# for ecs systems
if [[ -d /etc/pkgs/ ]]; then
    need () { . "/etc/pkgs/$1.sh"; }
fi

moz-find-files() {
    local file=cscope.files

    if [[ -n "$1" ]]; then
        local objdir=$1
    else
        local objdir=objdir-ff
    fi

    find . \( -path './objdir*' -prune \) -o \
           \( -name '*.c' -o \
              -name '*.cpp' -o \
              -name '*.cc' -o \
              -name '*.h' -o \
              -name '*.idl' -o \
              -name '*.inc' \) \
           \! -path '*tests/*' \! -path '*/testsuite/*' \
           -print >! $file

    if [[ -d $objdir ]]; then
        find ./$objdir -path '*/_xpidlgen/*' -name '*.h' \
                       -print >> $file
    fi
}

terminal_colors() {
    T='gYw'   # The test text

    echo -e "\n                 40m     41m     42m     43m     44m     45m     46m     47m";

    for FGs in '    m' '   1m' '  30m' '1;30m' '  31m' '1;31m' '  32m' \
               '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
               '  36m' '1;36m' '  37m' '1;37m'; do
        FG=${FGs// /}
        echo -en " $FGs \033[$FG  $T  "
        for BG in 40m 41m 42m 43m 44m 45m 46m 47m; do
            echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m"
        done
        echo
    done
    echo
}

slrn() {
    typeset -a servers
    servers=($(sed -n -r -e 's/^server "(.*)" +".*"$/\1/p' $HOME/.slrnrc))

    echo "Choose server:"
    echo
    for (( i = 1; i <= ${#servers}; i += 1 )); do
        echo "  ${i})" ${servers[$i]#snews://}
    done
    echo
    echo -n '> '
    read server

    [[ -z $server ]] && return
    [[ $server != <-> ]] && echo "Only numbers allowed!" && return
    [[ $server -gt ${#servers} ]] && echo "Not a valid server" && return

    TERM=xterm-256color command slrn -h ${servers[$server]}
}

# vim: filetype=zsh
