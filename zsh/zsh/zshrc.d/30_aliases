# reload functions
freload() { while (( $# )); do; unfunction $1; autoload -U $1; shift; done }
compdef _functions freload

# zsh profiling
profile () {
    ZSH_PROFILE_RC=1 $SHELL "$@"
}

# edit alias via zle:
edalias() {
    [[ -z "$1" ]] && { echo "Usage: edalias <alias_to_edit>" ; return 1 } || vared aliases'[$1]' ;
}
compdef _aliases edalias

# edit function via zle:
edfunc() {
    [[ -z "$1" ]] && { echo "Usage: edfunc <function_to_edit>" ; return 1 } || zed -f "$1" ;
}
compdef _functions edfunc


typeset -a _ls_opts; _ls_opts=(-F)
if [[ "$TERM" != "dumb" ]]; then
    _ls_opts+="--color=auto"
fi
if command ls --group-directories-first >/dev/null 2>&1; then
    _ls_opts+=--group-directories-first
fi
if ismac; then
    _ls_opts+="-G"
fi
alias ls="LC_COLLATE=POSIX ls $_ls_opts"
alias ll="ls -l"
alias l="ls -lA"

# list recent files, based on
# http://www.zsh.org/mla/users/2014/msg00326.html
lr() {
    (){
        l -r --sort=time "${(u)@}"
    } *(N./mh-${1:-24}) *(N./Om[-${2:-10},-1])
}

if is_root; then
    INTERACTIVE="-i"
fi
if islinux; then
    alias cp="nocorrect cp --preserve=timestamps $INTERACTIVE"
    alias rm="nocorrect rm --one-file-system $INTERACTIVE"
else
    alias cp="nocorrect cp $INTERACTIVE"
    alias rm="nocorrect rm $INTERACTIVE"
fi
alias mv="nocorrect mv $INTERACTIVE"
alias mkdir="nocorrect mkdir"

mcd() { mkdir -p "$@"; cd "$@" }
compdef _mkdir mcd

# defaults for some programs
alias grep="grep --extended-regexp --ignore-case"
alias gdb="gdb -q"
alias mtr="mtr -t"
alias diffstat="diffstat -C"

# execute last command as root
alias fu='sudo $(fc -ln -1) '
alias tree='tree --dirsfirst -F -A'

alias da='du -sch'
alias g="grep"
alias j='jobs -l'
alias jsonpp='python -mjson.tool'
alias le='/usr/share/vim/vimcurrent/macros/less.sh'
alias myip='curl http://v4.ipv6-test.com/api/myip.php'
alias pa='ps aux | less'
alias pu='ps ux | less'
alias r='ranger'
alias rot13='tr a-zA-Z n-za-mN-ZA-M'
alias t='noglob task'
alias vi='vim'
alias wr='wget --recursive --level=inf --convert-links --page-requisites --no-parent'
alias x='extract'
alias xc='xclip -i -selection clipboard'

is-at-least 4.3 && alias git='hub'

# Ag/Ack
if have ag; then
    # only 1 worker thread to have deterministic result order
    alias a='~/.etc/zsh/sack ag --smart-case --workers 1'
else
    alias a='~/.etc/zsh/sack ack'
fi
f() {
    local shortcut="$(sed -n "$1p" < $XDG_CACHE_HOME/grep_shortcuts | awk '
        {
            print $1
            file = $2
            for (i = 3; i <= NF; i++) {
                file = file " " $i
            }
            print file
        }
    ')"
    shortcut=(${(f)shortcut})
    local file="${shortcut[2]:a}"
    local cmd="$EDITOR +${shortcut[1]} \"$file\""
    # save the actual command in the history
    print -sr -- ${cmd%%$'\n'}
    eval $cmd
}

# diff
if have colordiff; then
    alias diff='colordiff'
    wdiff() { command wdiff "$@" | colordiff }
fi
alias ddiff="diff -Naurd --exclude-from=$HOME/.etc/excludes/diff"

echoerr()  { echo "$@" 1>&2 }
quotify()  { local r="$(sed -e 's/'\''/'\'\\\\\'\''/g')" && echo "'"$r"'" }
bk()       { cp -r -b ${1} ${1}_$(date --iso-8601=m) }
sshot()    { scrot '%Y-%m-%d-%H%M%S_$wx$h.png' -e 'mv $f ~/media/desktop/screenshots/' "$@" }
wp()       { dig +short txt ${1// /_}.wp.dg.cx }
getlinks() { perl -ne 'while ( m/"((www|ftp|http):\/\/.*?)"/gc ) { print $1, "\n"; }' $* }

tea() {
    local time=${1:-90s}
    eval "sleep $time"
    zenity --info --title="Tea is ready" --text="Tea is ready since $(date +%H:%M:%S)"
}

set_terminal_title() {
    if [[ "$TERM" == (xterm*|rxvt*|screen*) ]]; then
        printf "\e]0;%s\e\\" ${(V)argv}
    fi
}

man() {
    # See 'man 5 termcap' for capabilities

    # start bold mode => bold red
    typeset -x +g LESS_TERMCAP_md=$(tput setaf 1; tput bold)
    # start underlining => bold green
    typeset -x +g LESS_TERMCAP_us=$(tput setaf 2; tput bold)
    # end underlining => turn off all attributes
    typeset -x +g LESS_TERMCAP_ue=$(tput sgr0)
    # start standout mode => black on white
    typeset -x +g LESS_TERMCAP_so=$(tput setaf 0; tput setab 7)
    # end standout mode => turn off all attrs
    typeset -x +g LESS_TERMCAP_se=$(tput sgr0)

    # make groff not output ANSI escape sequences directly, but old codes with
    # backspace that can then be changed with the less codes above
    typeset -x +g GROFF_NO_SGR=1

    if (( $#argv == 1 )); then
        set_terminal_title "man($1)"
    elif (( $#argv == 2 )); then
        set_terminal_title "man($2($1))"
    fi

    command man "$@"
}

tmux() {
    # create a cache directory for status script updates, taken from byobu
    if [[ -w /dev/shm ]]; then
        for dir in /dev/shm/tmux-${USER}-*; do
            if [[ -d "$dir" ]] && [[ -O "$dir" ]]; then
                export TMUX_CACHE="$dir"
                break
            fi
        done
        if [[ ! -d "$TMUX_CACHE" ]] || [[ ! -O "$TMUX_CACHE" ]]; then
            export TMUX_CACHE=$(mktemp -d /dev/shm/tmux-$USER-XXXXXXXX)
        fi
    else
        export TMUX_CACHE="$XDG_CACHE_HOME/tmux"
    fi
    mkdir -p "$TMUX_CACHE/status" "$TMUX_CACHE/.last"

    command tmux "$@"
}

tmux-echo() {
    echo -e "\ePtmux;${1//\\e/\\e\\e}\e\\"
}

# easily reattach tmux sessions
# http://blog.plenz.com/2012-01/tmux-session-names.html
tm() {
    [[ -z "$1" ]] && { tmux attach; return 0 }
    tmux has -t $1 && tmux attach -t $1 || tmux new -s $1
}
__tmux-sessions() {
    local -a sessions
    sessions=( ${${(f)"$(command tmux list-sessions)"}/:[ $'\t']##/:} )
    _describe -t sessions 'sessions' sessions "$@"
}
compdef __tmux-sessions tm

jkill() { command kill "$@" }
_jkill() {
    local -a processes
    processes=( ${${(f)"$(command jps)"}/ /:} )
    _describe -t processes 'Java processes' processes "$@"
}
compdef _jkill jkill

alert() {
    eval '"$@"'
    local rv=$?
    notify-send -i gnome-terminal "[$rv] command '$@' finished"
    return $rv
}

alias ls_colors='echo $LS_COLORS | tr : '\''\n'\'' | sed '\''s/\(.*\)=\(.*\)/\x1b[\2m\1\t\2\x1b[0m/'\'''

# Function Usage: doc packagename
doc() { cd /usr/share/doc/$1 && ll }
_doc() { _files -W /usr/share/doc -/ }
compdef _doc doc

# conversions
alias i2u='iconv --from-code=ISO-8859-15 --to-code=UTF-8'
alias u2i='iconv --from-code=UTF-8 --to-code=ISO-8859-15'

# switch terminal encoding (rxvt-unicode only)
alias eucjp="printf '\33]701;%s\007' ja_JP.EUC-JP; export LANG=ja_JP.EUC-JP"
alias utf8="printf '\33]701;%s\007' en_US.UTF-8; export LANG=en_US.UTF-8"

# grep for running process, like: 'psgrep vim'
psgrep() {
    if [[ -z "$1" ]] ; then
        echo "psgrep - grep for process(es) by keyword" >&2
        echo "Usage: psgrep <keyword>" >&2 ; return 1
    else
        ps xauwww | head -n1
        ps xauwww | grep -v "grep.*$1" | grep $1
    fi
}

# upload()  { scp -p $1 cip:public_html/$2 }
upload() {
    if [[ -z "$1" ]]; then
        echo "usage: upload file1 file2 ..."
        return 1
    else
        wput ftp://majutsushi.net/httpdocs/stuff/ "$@"
    fi
    for i in "$@"; do
        echo "http://majutsushi.net/stuff/${i// /%20}"
    done
}

vim-profile-script() {
    if [[ "$#" != 2 ]]; then
        echo "usage: vim-profile-script <scriptpattern> <file to load>"
        return 1
    fi

    vim --cmd 'profile start profile.log' --cmd 'profile! file '$1'' "$2"
}

pdfembedfonts() {
    if [[ $# != 1 ]]; then
        echo "Usage: $0 input.pdf"
        return 1
    else
        tmpname=$(mktemp)
        gs -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dNOPLATFONTS -dPDFSETTINGS=/prepress -sOutputFile=$tmpname $1
        mv $tmpname $1
    fi
}

# zsh with perl-regex - use it e.g. via:
# regcheck '\s\d\.\d{3}\.\d{3} Euro' ' 1.000.000 Euro'
regcheck() {
    zmodload -i zsh/pcre
    pcre_compile $1 && \
    pcre_match $2 && echo "regex matches" || echo "regex does not match"
}

# find out which libs define a symbol
# usage example: 'lcheck strcpy'
lcheck() {
    if [[ -n "$1" ]] ; then
        nm -go /usr/lib/lib*.a 2>/dev/null | grep ":[[:xdigit:]]\{8\} . .*$1" | grep "$1"
    else
        echo "Usage: lcheck <function>" >&2
    fi
}

# display system state
status() {
    print ""
    print "Date..: "$(date "+%Y-%m-%d %H:%M:%S")""
    print "Shell.: Zsh $ZSH_VERSION (PID = $$, $SHLVL nests)"
    print "Term..: $TTY ($TERM), $BAUD bauds, $COLUMNS x $LINES chars"
    print "Login.: $LOGNAME (UID = $EUID) on $HOST"
    print "System: $(cat /etc/[A-Za-z]*[_-][rv]e[lr]*)"
    print "Uptime:$(uptime)"
    print ""
}

# debian stuff
if [[ -r /etc/debian_version ]] ; then
    alias acs='apt-cache search'
    alias aps='aptitude search'
    alias acsh='apt-cache show'
    alias acp='apt-cache policy'
    alias afs='apt-file search'
    alias api="$SUDO aptitude install"
    alias dbp='dpkg-buildpackage'
    alias muttbts='bts --mailreader="mutt -f %s" --mbox show'
    alias aptitude-just-recommended='aptitude -o "Aptitude::Pkg-Display-Limit=!?reverse-depends(~i) ~M !?essential"'
    alias aptitude-also-via-dependency='aptitude -o "Aptitude::Pkg-Display-Limit=~i !~M ?reverse-depends(~i) !?essential"'

    # use "dchange <package-name>" to view Debian's changelog of the package:
    dchange() {
        if [[ -r /usr/share/doc/${1}/changelog.Debian.gz ]] ; then
            less /usr/share/doc/${1}/changelog.Debian.gz
        else
            if [[ -r /usr/share/doc/${1}/changelog.gz ]] ; then
                less /usr/share/doc/${1}/changelog.gz
            else
                echo "No changelog for package $1 found, sorry."
                return 1
            fi
        fi
    }
    _dchange() { _files -W /usr/share/doc -/ }
    compdef _dchange dchange

    # use "uchange <package-name>" to view upstream's changelog of the package:
    uchange() {
        if [[ -r /usr/share/doc/${1}/changelog.gz ]] ; then
            less /usr/share/doc/${1}/changelog.gz
        else
            echo "No changelog for package $1 found, sorry."
            return 1
        fi
    }
    _uchange() { _files -W /usr/share/doc -/ }
    compdef _uchange uchange
fi

# Easy jdk switching
JDKS_PATH=${JDKS_PATH:-/opt/jdks}
for file in ${JDKS_PATH}/jdk*; do
    jdk=$(basename "$file")
    eval "$jdk () {
        local newpath
        if [[ "'"$PATH"'" =~ "'"$JDKS_PATH"'" ]]; then
            newpath="'"$(echo "$PATH" | sed -e '"'s,${JDKS_PATH}/jdk[^:]*,$file/bin,g'"')"'"
        else
            newpath=\"$file/bin\":"'"$PATH"'"
        fi
        if [[ -n \"\$*\" ]]; then
            (
                PATH="'"$newpath"'"
                JAVA_HOME=\""$file"\"
                exec \"\$@\"
            )
        else
            PATH="'"$newpath"'"
            JAVA_HOME=\""$file"\"
        fi

    }
    "
done

# vim: filetype=zsh
