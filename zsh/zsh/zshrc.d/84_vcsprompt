# partially based on
# https://github.com/git/git/blob/master/contrib/completion/git-completion.bash
# and
# http://git.madduck.net/v/etc/zsh.git/blob/HEAD:/.zsh/zshrc/60_vcsprompt

PV_REFS_PREFIX=" • "

COL_REFS="${pcol[51]}"
COL_REFS_DELIM=""
COL_FLAGS="${pcol[51]}"
COL_BRANCH="${pcol[220]}"
COL_REBASE="${pcol[167]}"
COL_UPSTREAM=""

GIT=(command git)

__gitdir () {
    if [ -n "${__git_dir-}" ]; then
        echo "$__git_dir"
    elif [ -d .git ]; then
        echo .git
    else
        $GIT rev-parse --git-dir 2>/dev/null
    fi
}

__prompt_git_show_upstream() {
    local key value
    typeset -a svn_remote
    local svn_url_pattern count n
    local upstream=git legacy="" verbose=""

    # get some config options from git-config
    local output="$($GIT config -z --get-regexp '^(svn-remote\..*\.url|bash\.showupstream)$' 2>/dev/null | tr '\0\n' '\n ')"
    while read -r key value; do
        case "$key" in
            bash.showupstream)
                if [[ -z "${value}" ]]; then
                    echo ""
                    return
                fi
                ;;
            svn-remote.*.url)
                svn_remote[$((${#svn_remote[@]} + 1))]="$value"
                svn_url_pattern+="\\|$value"
                upstream=svn+git # default upstream is SVN if available, else git
                ;;
        esac
    done <<< "$output"

    # Find our upstream
    case "$upstream" in
        git)    upstream="@{upstream}" ;;
        svn*)
            # get the upstream from the "git-svn-id: ..." in a commit message
            # (git-svn uses essentially the same procedure internally)
            typeset -a svn_upstream
            svn_upstream=($($GIT log --first-parent -1 \
                --grep="^git-svn-id: \(${svn_url_pattern#??}\)" 2>/dev/null))
            if [[ 0 -ne ${#svn_upstream[@]} ]]; then
                svn_upstream=${svn_upstream[$((${#svn_upstream[@]} - 1))]}
                svn_upstream=${svn_upstream%@*}
                local n_stop="${#svn_remote[@]}"
                for ((n = 1; n <= n_stop; ++n)); do
                    svn_upstream=${svn_upstream#${svn_remote[$n]}}
                done

                if [[ -z "$svn_upstream" ]]; then
                    # default branch name for checkouts with no layout:
                    upstream=${GIT_SVN_ID:-git-svn}
                else
                    upstream=${svn_upstream#/}
                fi
            elif [[ "svn+git" = "$upstream" ]]; then
                upstream="@{upstream}"
            fi
            ;;
    esac

    # Find how many commits we are ahead/behind our upstream
    count="$($GIT rev-list --count --left-right "$upstream"...HEAD 2>/dev/null)"

    local r=""
    case "$count" in
        "") # no upstream
            r="" ;;
        "0	0") # equal to upstream
            r="" ;;
        "0	"*) # ahead of upstream
            r=" +${count#0	}" ;;
        *"	0") # behind upstream
            r=" -${count%	0}" ;;
        *)	    # diverged from upstream
            r=" +${count#*	}/-${count%	*}" ;;
    esac

    echo -n "$COL_UPSTREAM$r${pcol[reset]}"
}

__prompt_git_geninfo() {
    local rebase=""
    local branch=""
    local refs=""

    if [ -f "$gitdir/rebase-merge/interactive" ]; then
        rebase="rebase-i"
        branch="$(cat "$gitdir/rebase-merge/head-name")"
    elif [ -d "$gitdir/rebase-merge" ]; then
        rebase="rebase-m"
        branch="$(cat "$gitdir/rebase-merge/head-name")"
    else
        if [ -d "$gitdir/rebase-apply" ]; then
            if [ -f "$gitdir/rebase-apply/rebasing" ]; then
                rebase="rebase"
            elif [ -f "$gitdir/rebase-apply/applying" ]; then
                rebase="am"
            else
                rebase="am/rebase"
            fi
        elif [ -f "$gitdir/MERGE_HEAD" ]; then
            rebase="merging"
        elif [ -f "$gitdir/CHERRY_PICK_HEAD" ]; then
            rebase="cherry-picking"
        elif [ -f "$gitdir/REVERT_HEAD" ]; then
            rebase="reverting"
        elif [ -f "$gitdir/BISECT_LOG" ]; then
            rebase="bisecting"
        fi

        if branch="$($GIT symbolic-ref HEAD 2>/dev/null)" ||
            branch="$($GIT describe --tags --exact-match HEAD 2>/dev/null)"; then
            refs="$(__prompt_git_refs)"
        elif branch="$(cut -c1-7 "$gitdir/HEAD" 2>/dev/null)..."; then
            if refs=$($GIT describe --all HEAD 2>/dev/null); then
                refs="${PV_REFS_PREFIX}${COL_REFS}${refs##heads/}${pcol[reset]}"
            fi
        else
            branch="unknown"
        fi
        branch="$branch"
    fi

    echo "${branch##refs/heads/}"
    echo "$rebase"
    echo "$refs"
}

__prompt_git_refs() {
    typeset -a refs_arr
    local refs=""

    refs="$($GIT show --pretty=format:%d -s HEAD)"
    refs="${refs// }"
    refs="${refs//\(}"
    refs="${refs//\)}"

    # remove redundant info
    refs_arr=("${(s:,:)refs}")
    refs_arr=(${refs_arr:#HEAD})
    refs_arr=(${refs_arr//${branch#refs\/heads\/}})
    refs_arr=(${refs_arr//*\/*})

    if [[ -n ${(j::)refs_arr} ]]; then
        refs="$PV_REFS_PREFIX$COL_REFS${(j:,:)refs_arr}"
        refs="${refs//,/${pcol[reset]}$COL_REFS_DELIM, ${pcol[reset]}$COL_REFS}${pcol[reset]}"
    else
        refs=""
    fi

    echo -n "$refs"
}

__prompt_git_flags() {
    local flags=""

    # show dirty state
    # --ignore-submodules can significantly speed up if submodules are present
    $GIT diff --no-ext-diff --quiet --exit-code --ignore-submodules || flags+="*"
    if $GIT rev-parse --quiet --verify HEAD >/dev/null; then
        $GIT diff-index --cached --quiet HEAD -- || flags+="+"
    else
        flags+="#"
    fi

    # show stashed changes
    $GIT rev-parse --verify refs/stash >/dev/null 2>&1 && flags+="$"

    # show untracked files
    if [ -n "$($GIT ls-files --others --exclude-standard)" ]; then
        flags+="?"
    fi

    echo -n "$COL_FLAGS$flags${pcol[reset]}"
}

__prompt_git() {
    local gitdir="$(__gitdir)"

    if [ -n "$gitdir" ]; then
        typeset -a geninfo
        geninfo=("${(@f)$(__prompt_git_geninfo)}")

        local branch="$geninfo[1]"
        local rebase="$geninfo[2]"
        local refs="$geninfo[3]"

        if [[ -n "$rebase" ]]; then
            rebase=" ${COL_REBASE}${rebase}${pcol[reset]}"
        fi

        local c=""
        local flags=""

        if [ "true" = "$($GIT rev-parse --is-inside-git-dir 2>/dev/null)" ]; then
            if [ "true" = "$($GIT rev-parse --is-bare-repository 2>/dev/null)" ]; then
                c="BARE:"
            else
                branch="GIT_DIR!"
            fi
        elif [ "true" = "$($GIT rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
            flags="$(__prompt_git_flags)"
        fi

        local svn=""
        if [[ -d ${gitdir}/svn ]]; then
            svn="s"
        fi

        local result=""
        result+=" ±$svn"
        result+=" $COL_BRANCH$c$branch${pcol[reset]}"
        result+="$flags"
        result+="$rebase"
        result+="$(__prompt_git_show_upstream)"
        result+="$refs"

        echo -n $result
    fi
}

__prompt_hg() {
    hg prompt --angle-brackets "\
< ☿ $COL_BRANCH<branch>${pcol[reset]}>\
<$COL_FLAGS<status|modified|unknown>${pcol[reset]}>\
<$COL_FLAGS<update>${pcol[reset]}>\
<$PV_REFS_PREFIX$COL_REFS<tags|${pcol[reset]}$COL_REFS_DELIM, ${pcol[reset]}$COL_REFS>${pcol[reset]}>" 2>/dev/null
}

__prompt_vcs_type()
{
    # return the type of the closest repository in the path hierarchy
    local dir

    # protect against infinite loop if current directory got deleted
    [[ ! -d "$PWD" ]] && echo NONE && return

    while true; do
        [ -d ${dir}.git ] && echo git && break
        [ -d "$GIT_DIR" ] && echo git && break
        [ -d ${dir}.hg ] && echo hg && break
        [ "$(readlink -f ${dir:-.})" = / ] && echo NONE && break
        dir="../$dir"
    done
}

__prompt_vcs() {
    local type="$(__prompt_vcs_type)"

    case "$type" in
        git)
            __prompt_git
            ;;
        hg)
            __prompt_hg
            ;;
        *)
            ;;
    esac
}

# vim: filetype=zsh
