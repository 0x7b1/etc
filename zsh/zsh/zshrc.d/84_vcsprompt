# partially based on
# https://github.com/git/git/blob/master/contrib/completion/git-completion.bash
# and
# http://git.madduck.net/v/etc/zsh.git/blob/HEAD:/.zsh/zshrc/60_vcsprompt

__pv_refs_prefix=" •"

__prompt_col_refs="%F{51}"
__prompt_col_refs_delim=""
__prompt_col_flags="%F{51}"
__prompt_col_branch="%F{220}"
__prompt_col_rebase="%F{167}"
__prompt_col_upstream=""

__git_cmd=(command git)

__gitdir() {
    if [[ -n "${__git_dir}" ]]; then
        echo "$__git_dir"
    elif [[ -d .git ]]; then
        echo .git
    else
        __git_dir=$($__git_cmd rev-parse --git-dir 2>/dev/null)
        echo $__git_dir
    fi
}

__prompt_git_show_upstream() {
    local key value
    typeset -a svn_remote
    local svn_url_pattern count n
    local upstream=git legacy="" verbose=""

    # get some config options from git-config
    local output="$($__git_cmd config -z --get-regexp '^(svn-remote\..*\.url|bash\.showupstream)$' 2>/dev/null | tr '\0\n' '\n ')"
    while read -r key value; do
        case "$key" in
            bash.showupstream)
                if [[ -z "${value}" ]]; then
                    echo ""
                    return
                fi
                ;;
            svn-remote.*.url)
                svn_remote[$((${#svn_remote[@]} + 1))]="$value"
                svn_url_pattern+="\\|$value"
                upstream=svn+git # default upstream is SVN if available, else git
                ;;
        esac
    done <<< "$output"

    # Find our upstream
    case "$upstream" in
        git)    upstream="@{upstream}" ;;
        svn*)
            # get the upstream from the "git-svn-id: ..." in a commit message
            # (git-svn uses essentially the same procedure internally)
            typeset -a svn_upstream
            svn_upstream=($($__git_cmd log --first-parent -1 \
                --grep="^git-svn-id: \(${svn_url_pattern#??}\)" 2>/dev/null))
            if [[ 0 -ne ${#svn_upstream[@]} ]]; then
                svn_upstream=${svn_upstream[$((${#svn_upstream[@]} - 1))]}
                svn_upstream=${svn_upstream%@*}
                local n_stop="${#svn_remote[@]}"
                for ((n = 1; n <= n_stop; ++n)); do
                    svn_upstream=${svn_upstream#${svn_remote[$n]}}
                done

                if [[ -z "$svn_upstream" ]]; then
                    # default branch name for checkouts with no layout:
                    upstream=${GIT_SVN_ID:-git-svn}
                else
                    upstream=${svn_upstream#/}
                fi
            elif [[ "svn+git" = "$upstream" ]]; then
                upstream="@{upstream}"
            fi
            ;;
    esac

    # Find how many commits we are ahead/behind our upstream
    count="$($__git_cmd rev-list --count --left-right "$upstream"...HEAD 2>/dev/null)"

    local r=""
    case "$count" in
        "") # no upstream
            r="" ;;
        "0	0") # equal to upstream
            r=" %F{green}✓%f" ;;
        "0	"*) # ahead of upstream
            r=" %F{green}↑%f${count#0	}" ;;
        *"	0") # behind upstream
            r=" %F{red}↓%f${count%	0}" ;;
        *)	    # diverged from upstream
            r=" %F{green}↑%f${count#*	}/%F{red}↓%f${count%	*}" ;;
    esac

    if [[ -n "$r" ]]; then
        echo -n "$__prompt_col_upstream$r%f"
    fi
}

__prompt_git_geninfo() {
    local gitdir="$(__gitdir)"
    local rebase=""
    local branch=""
    local refs=""

    if [[ -f "$gitdir/rebase-merge/interactive" ]]; then
        rebase="rebase-i"
        branch="$(cat "$gitdir/rebase-merge/head-name")"
    elif [[ -d "$gitdir/rebase-merge" ]]; then
        rebase="rebase-m"
        branch="$(cat "$gitdir/rebase-merge/head-name")"
    else
        if [[ -d "$gitdir/rebase-apply" ]]; then
            if [[ -f "$gitdir/rebase-apply/rebasing" ]]; then
                rebase="rebase"
            elif [[ -f "$gitdir/rebase-apply/applying" ]]; then
                rebase="am"
            else
                rebase="am/rebase"
            fi
        elif [[ -f "$gitdir/MERGE_HEAD" ]]; then
            rebase="merging"
        elif [[ -f "$gitdir/CHERRY_PICK_HEAD" ]]; then
            rebase="cherry-picking"
        elif [[ -f "$gitdir/REVERT_HEAD" ]]; then
            rebase="reverting"
        elif [[ -f "$gitdir/BISECT_LOG" ]]; then
            rebase="bisecting"
        fi

        if branch="$($__git_cmd symbolic-ref HEAD 2>/dev/null)" ||
            branch="$($__git_cmd describe --tags --exact-match HEAD 2>/dev/null)"; then
            refs="$(__prompt_git_refs)"
        elif branch="$(cut -c1-7 "$gitdir/HEAD" 2>/dev/null)"; then
            if refs=$($__git_cmd describe --all HEAD 2>/dev/null); then
                refs=" ${__prompt_col_refs}${refs##heads/}%f"
            fi
        else
            branch="unknown"
        fi
        branch="$branch"
    fi

    echo "${branch##refs/heads/}"
    echo "$rebase"
    echo "$refs"
}

__prompt_git_refs() {
    typeset -a refs_arr
    local refs=""

    # prevent error message in repos without any commits
    $__git_cmd rev-parse --quiet --verify HEAD >/dev/null || return

    refs="$($__git_cmd show --pretty=format:%d -s HEAD)"
    refs="${refs// }"
    refs="${refs//\(}"
    refs="${refs//\)}"

    # remove redundant info
    refs_arr=("${(s:,:)refs}")
    refs_arr=(${refs_arr:#HEAD*})
    refs_arr=(${refs_arr//${branch#refs\/heads\/}})
    refs_arr=(${refs_arr:#tag:})
    refs_arr=(${refs_arr//*\/*})

    if [[ -n ${(j::)refs_arr} ]]; then
        refs=" $__prompt_col_refs${(j:,:)refs_arr}"
        refs="${refs//,/%f$__prompt_col_refs_delim, %f$__prompt_col_refs}%f"
    else
        refs=""
    fi

    echo -n "$refs"
}

__prompt_git_flags() {
    local flags=""

    # show dirty state
    # --ignore-submodules can significantly speed up if submodules are present
    $__git_cmd diff --no-ext-diff --quiet --exit-code --ignore-submodules || flags+="%F{red}*"
    if $__git_cmd rev-parse --quiet --verify HEAD >/dev/null; then
        $__git_cmd diff-index --cached --quiet HEAD -- || flags+="%F{green}+"
    else
        flags+="%F{yellow}#"
    fi

    # show stashed changes
    $__git_cmd rev-parse --verify refs/stash >/dev/null 2>&1 && flags+="%F{yellow}$"

    # show untracked files
    if [[ -n "$($__git_cmd ls-files --others --exclude-standard)" ]]; then
        flags+="%F{cyan]}%%"
    fi

    # show whether there are any assume-unchanged files
    if $__git_cmd ls-files -v | command grep -q '^[a-z] '; then
        flags+=%fa
    fi

    echo -n "$__prompt_col_flags$flags%f"
}

__prompt_git() {
    local gitdir="$(__gitdir)"

    if [[ -n "$gitdir" ]]; then
        typeset -a geninfo
        geninfo=("${(@f)$(__prompt_git_geninfo)}")

        local branch="$geninfo[1]"
        local rebase="$geninfo[2]"
        local refs="$geninfo[3]"

        if [[ -n "$rebase" ]]; then
            rebase=" ${__prompt_col_rebase}${rebase}%f"
        fi

        local c=""
        local flags=""

        if [[ "true" = "$($__git_cmd rev-parse --is-inside-git-dir 2>/dev/null)" ]]; then
            if [[ "true" = "$($__git_cmd rev-parse --is-bare-repository 2>/dev/null)" ]]; then
                c="BARE:"
            else
                branch="GIT_DIR!"
            fi
        elif [[ "true" = "$($__git_cmd rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
            flags="$(__prompt_git_flags)"
        fi

        if [[ -d ${gitdir}/svn ]]; then
            _prompt_vcs_icon+="⚡"
        fi

        if [[ -n "${__git_toplevel}" ]]; then
            local prefix="${${${PWD#${__git_toplevel}}#/}%/}"
            local toplevel="${(Q)${(D)__git_toplevel}}"
        else
            local prefix="${${:-$(git rev-parse --show-prefix 2>/dev/null)}%/}"
            local toplevel="${(Q)${(D)PWD%/${prefix}}}"
        fi

        _prompt_path="%F{green}${toplevel}%f"
        _prompt_path+="@$__prompt_col_branch$c$branch%f"
        _prompt_path+="$flags"
        if [[ -n "$prefix" ]]; then
            _prompt_path+="%F{green}/${prefix%/}%f"
        fi

        _prompt_vcs_info="$rebase$(__prompt_git_show_upstream)$refs"
        if [[ -n $_prompt_vcs_info ]]; then
            _prompt_vcs_info="$__pv_refs_prefix$_prompt_vcs_info"
        fi
    fi
}

__prompt_hg() {
    _prompt_path="%F{green}%~%f"
    _prompt_vcs_info=$(hg prompt --angle-brackets "\
< • $__prompt_col_branch<branch>%f>\
<$__prompt_col_flags<status|modified|unknown>%f>\
<$__prompt_col_flags<update>%f>\
<$__pv_refs_prefix $__prompt_col_refs<tags|%f$__prompt_col_refs_delim, %f$__prompt_col_refs>%f>" 2>/dev/null)
}

__prompt_svn() {
    local root=$(=svn info | sed -n -e 's/Working Copy Root Path: //p')
    local prefix="${${${PWD#${root}}#/}%/}"
    root=${(D)root}
    local rev="$(svnversion -n)"
    if [[ "$rev" =~ "^[^0-9]" ]]; then
        rev="?"
    fi

    _prompt_path="%F{green}${root}%f"
    _prompt_path+="@${__prompt_col_branch}${rev}%f"

    typeset -a svnstatus
    svnstatus=(${(s:,:)${:-$(=svn status -u | awk '
        /^[MDR!]/ { mod++ }
        /^.M/     { mod++ }
        /^A/      { add++ }
        /^?/      { unknown++ }
        /^C/      { conflict++ }
        /^.C/     { conflict++ }
        /^        \*/ { update++ }
        END { printf("%d,%d,%d,%d,%d", mod, add, unknown, conflict, update) }
    ')}})
    local flags=""
    (( ${svnstatus[1]} > 0 )) && flags+="%F{red}*"
    (( ${svnstatus[2]} > 0 )) && flags+="%F{green}+"
    (( ${svnstatus[3]} > 0 )) && flags+="%F{cyan}?"
    (( ${svnstatus[4]} > 0 )) && flags+="%F{bold}%F{red}!%f"
    (( ${svnstatus[5]} > 0 )) && flags+="%F{white}u"
    _prompt_path+=$flags%f

    if [[ -n "$prefix" ]]; then
        _prompt_path+="%F{green}/${prefix}%f"
    fi

    _prompt_vcs_info=""
}

__prompt_vcs_type() {
    # return the type of the closest repository in the path hierarchy
    local dir

    # protect against infinite loop if current directory got deleted
    [[ ! -d "$PWD" ]] && echo NONE && return

    while true; do
        [[ -e "${dir}".git ]] && echo git && echo "${${:-${PWD}/${dir}}:a}" && break
        [[ -d "$GIT_DIR" ]] && echo git && break
        [[ -d "${dir}".hg ]] && echo hg && break
        [[ -d "${dir}".svn ]] && echo svn && break
        [[ "$(readlink -f ${dir:-.})" = / ]] && echo NONE && break
        dir="../$dir"
    done
}

__prompt_vcs() {
    # local type="$(__prompt_vcs_type)"
    typeset -a typeinfo
    typeinfo=("${(@f)$(__prompt_vcs_type)}")
    local type="${typeinfo[1]}"

    case "$type" in
        git)
            _prompt_vcs_icon="±"
            __git_toplevel="${typeinfo[2]}"
            __prompt_git
            ;;
        hg)
            _prompt_vcs_icon="☿"
            __prompt_hg
            ;;
        svn)
            _prompt_vcs_icon="⚡"
            __prompt_svn
            ;;
        *)
            _prompt_vcs_icon="•"
            _prompt_path="%F{green}%~%f"
            _prompt_vcs_info=""
            ;;
    esac
}
add-zsh-hook precmd __prompt_vcs

# vim: filetype=zsh
