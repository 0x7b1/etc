precmd () {
    # handle deleted and then recreated directories
    if ! [[ . -ef $PWD ]]; then
        if ! cd -- "${PWD}" >/dev/null 2>&1; then
            echo "W: ${PWD} does not exist anymore"
            return 1
        fi
    fi

    # adjust title of xterm
    # see http://www.faqs.org/docs/Linux-mini/Xterm-Title.html
    case $TERM in (xterm*|rxvt*|screen*)
        print -Pn "\e]0;%n@%m: %~\a"
        ;;
    esac
    if [[ "$TERM" == screen* ]]; then
        if [[ -n "$SSH_CLIENT" ]]; then
            print -Pn "\ek%m\e\\"
        else
            echo -ne "\ekzsh\e\\"
        fi
    fi
}

preexec () {
    # get the name of the program currently running and hostname of local machine
    # set screen window title if running in a screen
    if [[ "$TERM" == screen* ]]; then
        local CMD="${1[(wr)^(*=*|sudo|(auto)?ssh|-*)]//*\//}${SSH_CLIENT:+@${HOST//.*/}}"
        echo -ne "\ek$CMD\e\\"
    fi
    # adjust title of xterm
    case $TERM in (xterm*|rxvt*|screen*)
        print -Pn "\e]0;%n@%m: $1\a"
        ;;
    esac
}

__prompt_jobs() {
    echo '%(1j.%{%B%F{cyan}%}%j%{%b%f%}.)'
}

__prompt_exitcode() {
    echo '%(0?..%{%B%F{red}%}%?%{%b%f%})%(1j. .)'
}

# test if we have writing permission for the current directory
__prompt_wperm(){
    if ! [[ -w "$(pwd)" ]]; then
        echo "%{%B%F{red}%}!%{%b%f%}"
    fi
}

PS1='
%{%F{167}%B%}%n %{%f%}%}@ %{%F{220}%}%m%{%b%f%} ‚óè %{%B%F{green}%}%<...<%~%<<%{%f%b%}$(__prompt_wperm)$(__prompt_vcs)
%(!.#.>) '

RPS1='$(__prompt_exitcode)$(__prompt_jobs)'

PS2="%{%B%}%_%{%b%} %(!.#.>) "
PS3='?# '         # selection prompt used within a select loop.
PS4='+%N:%i:%_> ' # the execution trace prompt (setopt xtrace). default: '+%N:%i>'

# vim: filetype=zsh
