if is-at-least 4.3.5; then

_update_terminal_title() {
    if [[ -n "$1" ]]; then
        set_terminal_title "${1}"
    elif [[ -n "$SSH_CLIENT" ]]; then
        set_terminal_title "${(%):-%m}"
    else
        set_terminal_title "zsh"
    fi
}
add-zsh-hook precmd _update_terminal_title


_simplify_cmd() {
    # get first word of command that doesn't match the pattern
    local pattern="^(*=*|sudo|(auto)?ssh|-*)"
    local cmd="${1[(wr)${pattern}]}"

    # only retain part after last /
    cmd="${cmd//*\//}"

    # if running under ssh append @host
    if [[ -n $SSH_CLIENT ]]; then
        cmd+="@${(%):-%m}"
    fi

    print -n "$cmd"
}

# adapted from
# http://git.madduck.net/v/etc/zsh.git/blob/HEAD:/.zsh/zshrc/85_xtermtitle
_update_exec_titles() {
    # split up the command line
    local -a cmd; cmd=(${(z)2})

    # Construct a command that will output the desired job number.
    case $cmd[1] in
        fg) if (( $#cmd == 1 )); then
                # No arguments, must find the current job
                cmd=(builtin jobs -l %+)
            else
                # Replace the command name, ignore extra args.
                cmd=(builtin jobs -l ${(Q)cmd[1]})
            fi;;
        %*) cmd=(builtin jobs -l ${(Q)cmd[1]});; # Same as "else" above
        *) # Not resuming a job,
            _update_terminal_title "$(_simplify_cmd "$cmd")"
            return;;                        # so we're all done
    esac

    local -A jt; jt=(${(kv)jobtexts})       # Copy jobtexts for subshell

    # Run the command, read its output, and look up the jobtext.
    # Could parse $rest here, but $jobtexts (via $jt) is easier.
    $cmd >>(
        read num rest
        cmd=(${(z)${(e):-\$jt$num}})
        _update_terminal_title "$(_simplify_cmd "$cmd")"
    )
}
add-zsh-hook preexec _update_exec_titles


# Old version
else # < 4.3.5

_old_precmd_title() {
    # adjust screen window title
    if [[ "$TERM" == screen* ]]; then
        if [[ -n "$SSH_CLIENT" ]]; then
            print -nP "\ek%m\e\\"
        else
            print -n "\ekzsh\e\\"
        fi
    fi

    # adjust title of xterm
    # see http://www.faqs.org/docs/Linux-mini/Xterm-Title.html
    case $TERM in (xterm*|rxvt*|screen*)
        print -nP "\e]0;%n@%m: %~\e\\"
        ;;
    esac
}
add-zsh-hook precmd _old_precmd_title

_old_preexec_title() {
    # get the name of the program currently running and hostname of local machine
    # set screen window title if running in a screen
    if [[ "$TERM" == screen* ]]; then
        local CMD="${1[(wr)^(*=*|sudo|(auto)?ssh|-*)]//*\//}${SSH_CLIENT:+@${HOST//.*/}}"
        print -nr $'\ek'$CMD$'\e\\'
    fi

    # adjust title of xterm
    case $TERM in (xterm*|rxvt*|screen*)
        print -nr $'\e]0;'${USER}@${HOST}: $1$'\e\\'
        ;;
    esac
}
add-zsh-hook preexec _old_preexec_title

fi

# vim: filetype=zsh
